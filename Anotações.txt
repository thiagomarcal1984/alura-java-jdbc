Pequeno Script para criação do banco de dados no MySQL:
    CREATE DATABASE loja_virtual;
    USE loja_virtual;
    CREATE TABLE PRODUTO(
        id INT AUTO_INCREMENT
        , nome VARCHAR(50) NOT NULL
        , descricao VARCHAR(255)
        , PRIMARY KEY (id)
    ) Engine = InnoDB;
    INSERT INTO produto (nome, descricao) VALUES ('NOTEBOOK', 'NOVO NOTEBOOK');
    INSERT INTO produto (nome, descricao) VALUES ('GELADEIRA', 'BLUE FREEZER');

Entre a aplicação Java e o database existe o chamado Driver do database. Por
exemplo: o MySQL desenvolve um Driver MySQL, o Postgre desenvolve um driver
pro Postgre etc. Os drivers são distribuídos no formato .jar.

No entanto, os detalhes de implementação de cada driver variam de um pra outro.
Para abstrair esses detalhes, existe o JDBC (Java DataBase Connectivity), que
é a especificação que os drivers precisam implementar. Assim, a aplicação Java
só precisa conhecer o JDBC, não os drivers específicos do database. O pacote
padrão do JDBC é o java.sql.*.


Interfaces JDBC:
    Connection => Statement (PreparedStatement) => ResultSet


A interface para buscar a conexão como db é a seguinte:
    Connection con = DriverManager.getConnection(UrlDeConexao);


Novos comandos do Eclipse:
    Como rodar a aplicação main no Eclipse: 
        Ctrl + F11.
    Como testar a cobertura (Coverage) no Eclipse (?): 
        Ctrl + Shift + F11.
    Como refatorar o nome de uma variável:
        Clique sobre o nome da variável/método/classe;
        Digite Alt + Shift + T;
        Selecione o comando Rename;
        Troque o nome da variável/método/classe.

Maven: para rodar o projeto do tipo Console usando a linha de comando:
    mvn compile exec:java -D"exec.mainClass=br.com.loja.TestaConexao"
    Repare no -D (maiúsculo). O problema é que o Console fica travado.

Parâmetro dentro de DriverManager.getConnection(url, user, password):
    jdbc:{provider}://{server}/{db}?{prm1}={val1}&{prm2}={val2}&{prm3}={val3}
    jdbc:mysql://localhost/loja_virtual?useTimezone=true&serverTimezone=UTC
        jdbc:                   => especificação.
        mysql://                => provedor do database usado.
        localhost/              => endereço do servidor do database.
        loja_virtual            => nome do database usado.
        ?useTimezone=true       => primeiro parâmetro fornecido.
        &serverTimezone=UTC     => segundo parâmetro fornecido


Novo objeto JDBC: Statement. As classes java.sql.Connection criam Statements, 
que são as formas de interagir com o database (via select, insert, update etc).

Métodos em Connection:
    .createStatement(stringComandoSql)  => cria um objeto Statement que NÃO vai
            receber parâmetros.
    .prepareStatement(stringComandoSql, int flag) => cria um objeto 
            PreparedStatement que SIM vai receber parâmetros. A flag 
            Statement.RETURN_GENERATED_KEYS é usada para possibilitar a 
            recuperação das PK de registros modificados através do método 
            .getGeneratedKeys() obtido do objeto PreparedStatement.
    .setAutoCommit(false) => Evita o commit automático das transações.
    .commit()       => Procede a todas as alterações feitas no database.
    .rollback()       => Desfaz alterações feitas no DB antes do último commit.
    .close()        => Libera os recursos do objeto Connection imediatamente.

Métodos em Statement:
    .execute(stringComandoSql)  => Retorna true se o resultado for uma lista.
            Se o comando for um INSERT, UPDATE ou DELETE, retorna false.
            De forma purista, .execute diz o comando retorna um ResultSet.
    .getResultSet()     => Retorna a lista resultante do comando em Statement.
    .execute(String stringComandoSql, int Statement.RETURN_GENERATED_KEYS) => 
            Também retorna um booleano, mas se estiver com a flag 
            RETURN_GENERATED_KEYS, ele cria um ResultSet dentro do objeto 
            Statement, que contém os códigos de identificação gerados. Para 
            recuperar esse ResultSet, use: 
                ResultSet rst = stm.getGeneratedKeys();
    .getUpdateCount()   => Retorna a quantidade de registros alterados após a
            execução do Statement (seja com DELETE ou UPDATE). Se não houver
            resultados ou o método .execute retornar um ResultSet, este método
            retorna -1.
    .close()        => Libera os recursos do objeto Statement imediatamente.

Métodos em PreparedStatement:
    .getGeneratedKeys() => Retorna um ResultSet que contém as PK das linhas
            modificadas dentro do database.
    .setString(int numOrdem, string Valor)  => Seta uma String no parâmetro
            que aparece na ordem numOrdem da PreparedStatement.
    .setInt(int numOrdem, int Valor)  => Seta um Integer no parâmetro
            que aparece na ordem numOrdem da PreparedStatement.

Métodos em ResultSet:
    .next()     => Muda o cursor do ResultSet para a próxima linha.
                    Retorna true se o método conseguir avançar o cursor.
    .getInt(stringNomeColuna)   => Retorna um inteiro correspondente à coluna
            indicada em stringNomeColuna.
    .getInt(intSeqColuna)   => Retorna um inteiro correspondente à coluna
            indicada em intSeqColuna (base 1, não zero).
    .getString(stringNomeColuna)  => Retorna uma String correspondente à coluna
            indicada em stringNomeColuna.
    .getString(intSeqColuna)  => Retorna uma String correspondente à coluna
            indicada em intSeqColuna (base 1, não zero).
    .getMetaData()  => Objeto ResultSetMetaData usado para trabalhar analisar
            o ResultSet. Assim, podemos identificar as colunas do ResultSet.


Refatorando o código: a classe ConnectionFactory centraliza os parâmetros para
criar uma conexão com o database. Logo, é o ponto único e central para mudar
esses parâmetros.


SQL Injection: é o ataque de incluir um script SQL em campos que são usados 
para os CRUD da aplicação. 


A partir do Java 7 surgiu o chamado "try-with-resources", que facilita o 
fechamento de objetos Connection. Classes que implementam a interface 
AutoClosable podem ser usados em try-with-resources. Algumas classes que 
implementam AutoClosable:
    * Connection
    * Statement
    * ResultSet
